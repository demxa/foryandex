<!DOCTYPE html>
<html>
	<head>
		<meta http-equiv="content-type" content="text/html; charset=utf-8" />
		<title>Yandex School</title>
		<link rel="stylesheet" href="style.css" type="text/css" />
		<script src="jquery.js"></script>
		<script src="js.js"></script>
	</head>
	<body>
		<div id="main">
			<div class="title">Общие вопросы</div>
			<div class="content"><img src="yaz.jpg" style="display:inline;"></div>
			<div class="title">Опыт разработки</div>
			<div class="content"><img src="yaz.jpg" style="display:inline;"></div>
			<div class="title">Технические вопросы</div>
			<div class="content">
			  <ol>
				<li class="question">Перечислите известные вам инструменты и приёмы для отладки кода в разных браузерах.</li>
				<div class="answer">
				Если известными мне считать те инструменты, с которыми я работал, то это Firebug от Мозиллы и Dradonfly от Оперы. В IE для интереса ставил Developer Toolbar, не понравилось, закрыл. Также часто пользуюсь "Просмотр кода элемента" в Хроме, но JS-скрипты там отлаживать не пробовал. Только для CSS. 
				Основные приёмы отладки - это идти от простого к сложному и выводить промежуточные результаты (с помощью alert() или console.log). Максимально заполнять Watches, пошаговая отладка (в принципе, всё то же самое, что и в десктопном программировании).
				</div>
				<li class="question">Опишите своими словами, что происходит в браузерах при клике на ссылку yandex.ru (полнота ответа — на ваше усмотрение).</li>
				<div class="answer">
				Раз полноту ответа оставили на моё усмотрение, то я позволю себе опустить слишком подробные технические детали (например, вместо "просматривается кеш днс на наличие адреса для yandex.ru, если не находим - обращаемся к первичному днс-серверу....." сказать "получаем от DNS IP-адрес хоста yandex.ru). 
				Итак, при клике на ссылку yandex.ru происходит следующее:
				<ol>
				<li>С помощью DNS определяется IP-адрес узла по имени yandex.ru</li>
				<li>Обмен флагами SYN, SYN-ACK, ACK для установления соединения</li>
				<li>Браузер передаёт серверу Яндекса HTTP-заголовки, что-то вроде этого:
					<pre>
GET / HTTP/1.1
Host: yandex.ru
User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64; rv:14.0) Gecko/20100101 Firefox/14.0.1
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
Accept-Language: ru-ru,ru;q=0.8,en-us;q=0.5,en;q=0.3
Accept-Encoding: gzip, deflate
Connection: keep-alive
					</pre>

				Потом происходит перенаправление на www.yandex.ru, опять отсылаются похожие заголовки, а сервер ответит своими заголовками:
					<pre>				
HTTP/1.1 200 Ok
Server: nginx
Date: Thu, 02 Aug 2012 09:58:31 GMT
Content-Type: text/html; charset=UTF-8
Transfer-Encoding: chunked
Connection: close
(и ещё много всякой служебной информации)
					</pre>
				</li>
				<li>Если на запрашиваемой странице есть какое-то динамическое содержимое (а на Яндексе оно точно есть), то оно обрабатывается (подргужаются новости, погода и пр.)</li>
				<li>Затем сервер передаёт нам полностью собранный HTML-код нужной нам страницы</li>
				<li>Браузер по этому HTML-коду отображает страницу (подгружает рисунки, выполняет JS-код и пр.)</li>
				</ol>
				</div>
				<li class="question">Предположим, что мы представляем автосалон по продаже японских и немецких автомобилей. У нас есть базовые классы и примеры их использования. Допишите недостающий код.</li>
				<div class="answer">
					<p class=subtitle style="text-decoration: underline;">Код</p>
					<pre class=code>						
/**
 * Создает экземпляр Машины
 * @this {Car}
 * @param {string!!} manufacturer Производитель
 * @param {string} model Модель
 * @param {number} year Год производство
 */
function Car(manufacturer, model, year) {
	<span class=my>date = new Date();
	year = year || date.getFullYear(); </span>
	this.manufacturer = manufacturer;
	this.model = model;
	this.year = year;
	<span class=my>this.getInfo = this.toString = function() { return this.manufacturer+' '+this.model+' '+this.year; }
	this.getDetailedInfo = function() { return 'Производитель: '+this.manufacturer+'. Модель: '+this.model+'. Год: '+this.year; }
	this.car = this.getInfo();
	this.price = 0;</span>
}
// @TODO: если конструктор вызывается без указания текущего года, то подставлять текущий
// @TODO: реализовать методы вывода информации о машине: 
// console.log('Car: ' + bmw); // Car: BMW X5 2010
// console.log(bmw.getInfo()); // BMW X5 2010
// console.log(bmw.getDetailedInfo()); // Производитель: BMW. Модель: X5. Год: 2010
	var bmw = new Car("BMW", "X5", 2010),
	audi = new Car("Audi", "Q5", 2012),
	toyota = new Car("Toyota", "Camry");
/**
 * Создает экземпляр Автосалона
 * @this {CarDealer}
 * @param {string} name Название автосалона
 */
 
function CarDealer(name) {
	this.name = name;
	this.cars = [];
	<span class=my>this.add = function(cars) {
		for(var i=0; i &lt; arguments.length; i++)
			this.cars.push(arguments[i]) 
	}
	this.setPrice = function(car,price) {
		for(var i=0; i &lt; this.cars.length; i++)
			if(this.cars[i].car == car) this.cars[i].price = price;
	}
	this.list = function() {
		var output = [];
		for(var i=0; i &lt; this.cars.length; i++)
			output.push(this.cars[i].car);
		console.log(output.join(', '));
	}
	this.listByCountry = function(country) {
		var output = [];
		for(var i=0; i &lt; this.cars.length; i++)
			if(this.cars[i].getCountry() == country) output.push(this.cars[i].car);
		console.log(output.join(', '));
	}
	this.listRubPrice = function() {
		var output = [];
		for(var i=0; i &lt; this.cars.length; i++)
			output.push(this.cars[i].car+'. Цена в руб.: '+toRub(this.cars[i].price));
		console.log(output.join("\n"));
	}</span>
}
	var yandex = new CarDealer('Яндекс.Авто');
	// @TODO: реализовать метод добавления машин в автосалон. Предусмотреть возможность добавления одной машины, нескольких машин.
yandex
	.add(bmw, audi)
	.add(toyota);
	// @TODO: реализовать метод установки цены на машину
/**
 * Установить цену на машину
 * @param {string} car идентификатор машины
 * @param {string} price стоимость
 */
// идентификатор машины составляется следующим образом "производитель модель год"
// стоимость машины может быть задана в двух валютах: йена и евро.
yandex
	.setPrice('BMW X5 2010', '€2000')
	.setPrice('Audi Q5 2012', '€3000')
	.setPrice('Toyota Camry 2012', '¥3000');
	// @TODO: реализовать вывод списка автомобилей в продаже, с фильтрацией по стране производителю, используя метод getCountry:
function getCountry() {
	switch (this.manufacturer.toLowerCase()) {
	case 'bmw':
	case 'audi':
		return 'Germany';
	case 'toyota':
		return 'Japan';
	}
}

<span class=my>Car.prototype.getCountry = getCountry;</span>

yandex.list(); //BMW X5 2010, Audi Q5 2012, Toyota Camry 2012
yandex.listByCountry('Germany'); //BMW X5 2010, Audi Q5 2012
	// @TODO: бонус! выводить список машин с ценой в рублях.
<span class=my>function toRub(price) //передаём цену в иностранной валюте и курс относительно рубля
{
	//возмём текущие курсы валют с главной Яндекса
	var exch = {'€':39.7525,'¥':50.9534} 
	return Math.ceil(price.substr(1) * exch[price[0]]); //по первому символу цены определим, из какой валюты будем конвертировать
}</span>
					</pre>
				</div>
				<li class="question">Найдите все текстовые файлы (*.txt), в имени которых содержится «yandex», а в содержимом — «школа разработки интерфейсов»</li>
				<div class="answer">
				Т.к. не указано, где мне следует произвести поиск, пусть это будет Unix-like:
				<pre># find . -type f -name "*yandex*.txt" -exec grep -r -H "школа разработки интерфейсов" {} \;</pre>
				</div>
				<li class="question">Дана программа, реализованная одновременно на Bash, Python и Perl. Программа принимает произвольное количество аргументов и печатает их количество. Нужно добавить опцию -v для verbose-режима, в котором дополнительно выводится значение каждого из аргументов.</li>
				<div class="answer">
				<p class=subtitle style="text-decoration: underline;">Bash</p>
				<pre class=code>
				
		#!/usr/bin/env bash

		usage() {
		cat << EOF
		Usage: printargs.sh [OPTIONS] [ARGUMENTS]
		  Print the number of arguments.

		OPTIONS:
		  -h      print help message
		  -m MSG  custom message

		Examples:
		  printargs.sh a b c
		  printargs.sh -m 'Arguments count: ' a b c
		  printargs.sh -h

		EOF
		}

		while getopts hm:v OPTION # TODO: add '-v' option for verbose mode 
		do
			case $OPTION in
				h)
					usage
					exit 1
					shift;;
				m)
					MESSAGE=$OPTARG
					shift;shift;;
				<span class=my>v)
					VERB="YES"
					shift</span>
			esac
		done

		COUNT=0

		for ARG in $@; do
			# TODO: add '-v' option for verbose mode 
			# and print each argument 
			let COUNT+=1
			<span class=my>ARGS[$COUNT]=${!COUNT}</span>
		done

		if [[ "$MESSAGE" != "" ]]; then
			echo $MESSAGE
		fi

		<span class=my>if [[ "$VERB" == "YES" ]]; then
			i=1
			while [ "$i" -le ${#ARGS[@]} ]
			do
				echo $i' argument is '${ARGS[$i]}
				let i+=1
			done
		fi</span>

		echo $COUNT
</pre>
<p class=subtitle style="text-decoration: underline;">Python</p>
<pre class=code>

		#!/usr/bin/env python

		import argparse

		parser = argparse.ArgumentParser(description='Print the number of arguments.')
		parser.add_argument('arguments', metavar='ARG', type=str, nargs='*', help='some arguments')
		parser.add_argument('-m', dest='message', default='', help='custom message')
		<span class=my>parser.add_argument('-v', action='store_true', help='verbose mode')</span>
		# TODO: add '-v' option for verbose mode

		args = parser.parse_args()

		count = 0
		<span class=my>arg_names = []</span>

		for a in args.arguments:
			# TODO: add '-v' option for verbose mode
			# and print each argument
			<span class=my>arg_names += [args.arguments[count]]</span>
			count += 1

		if args.message != '':
			print(args.message)

		<span class=my>if args.v == True:
			i=1
			for a in arg_names:
				print(str(i)+' argument is '+a)
				i+=1</span>

		print(count)
</pre>
<p class=subtitle style="text-decoration: underline;">Perl</p>
<pre class=code>

		#!/usr/bin/env perl

		use strict;
		use Getopt::Long;
		use Pod::Usage;

		my $help;
		my $message = '';
		<span class=my>my $verbose = '';</span>

		@ARGV and GetOptions(
			"h" => \$help,
			"m:s" => \$message,
			<span class=my>"v" => \$verbose,</span>
			# TODO: add '-v' option for verbose mode
		) or pod2usage(1);
		pod2usage(-verbose => 2, -exitval => 2) if $help;

		my $count = 0;
		<span class=my>my $arg_names = '';</span>

		foreach(@ARGV) {
			# TODO: add '-v' option for verbose mode
			# and print each argument
			<span class=my>$arg_names.=$count+1 . " argument is " . @ARGV[$count] . "\n";</span>
			$count++;
		}

		if($message ne "") {
			print($message . "\n");
		}

		<span class=my>if($verbose == 1) {
			print($arg_names);
		}</span>

		print($count . "\n");

		__END__

		=head1 NAME

			printargs.pl - Print the number of arguments.

		=head1 SYNOPSIS

			printargs.pl [options] [arguments]

		=head1 OPTIONS

			-h      Show help message.

			-m MSG  Specify a custom message.

			=head1 EXAMPLE

			printargs.sh a b c

			printargs.sh -m 'Arguments count: ' a b c

			printargs.sh -h
</pre>
				</div>
				<li class="question">Расскажите, в каком объёме и при каких обстоятельствах вы изучали следующие темы: языки программирования (императивные/декларативные, разные системы типов), структуры (классы, структуры данных, примитивные типы), парадигмы (события, ООП, параллельность/асинхронность, кеширование), алгоритмы (парсинг, сортировка, поиск), паттерны.</li>
				<div class="answer">
					Первым языком программирования для меня стал QBasic, его преподавали в начальной школе. В старших классах - Турбо Паскаль, Delphi. Были изложены основные операторы, типы данных, языковые конструкции. Одно время курс программирования был синхронизирован с курсом алгебры и геометрии, то есть программировали то, что недавно проходили по математике. Также рисовали, анимировали и т.д. В 10 классе пошёл на курсы по C++, которые дали базовые поверхностные знания данного языка. Серьёзное изучение языков продолжилось в университете. Delphi, C++, Assembler, Prolog, AutoLISP. Внушительную часть программы по Delphi/C++ составляло ООП. Здесь были структуры, события, алгоритмы  сортировки, поиска. С алгоритмами и паттернами вплотную столкнулся на работе в ChipFind, где надо было осуществлять парсинг иностранных складов и осуществлять поиск по ним. В это время уже хорошо знал HTML, CSS, PHP, немного хуже - JS. На военной кафедре неплохо подтянул Bash.
				</div>
			  </ol>
			</div>
		</div>	
	</body>
</html>
